#include <iostream>

#define n 4 // number of users
#define m 4 // number of movies




class itemrank{
private:
    int max_iter = 20;
    float a = 0.85,newIR;
    float summation = 0;
    float movies_correlation[m], IR_old[m], initial_critics[m];
public:
    // constructor
    itemrank() {};

    void read_movies_cor(int row, float & read_pointer) {
        float temp;
        for (int j = 0; j < m; j++) {
            movies_correlation[j] = read_pointer;
            read_pointer++ ;
        }
    }
    void read_IR(int col, float &read_pointer){
        for(int j = 0; j < m; j++){
            IR_old[j] = read_pointer;
            read_pointer++ ;
        }
    }
    void read_initial_critics(int col, float &read_pointer){
        for(int j = 0; j < m; j++){
            initial_critics[j] = read_pointer;
            read_pointer++ ;
        }
    }
    void write_IR(int &row_state, int &col_state, float &value_to_be_written, int i, int user, float newIR){
        row_state = i;
        col_state = user;
        value_to_be_written = newIR;
    }

    void run(int &row_state, int &col_state, float &read_pointer, float &value_to_be_written){

        for(int user = 0; user < n; user++) { //for each user
            for (int t = 0; t < max_iter; t++) { //for each time
                for(int i = 0; i < m; i++) { //for each movie
                    summation = 0;
                    read_movies_cor(i, read_pointer);
                    read_IR(i, read_pointer);
                    for(int j = 0; j < m; j++) {
                        summation = summation + movies_correlation[j] * IR_old[j];
                    }
                    read_initial_critics(user, read_pointer);
                    newIR =  a * summation + (1-a)*initial_critics[i]; //rating of i-th movie of user
                    write_IR(row_state,col_state, value_to_be_written, i, user, newIR);
                }
            }
        }
    }
};


int main() {

    // define arrays used in program
    float IR_old[m][n], IR_new[m][n];
    // initialize IR matrix
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            IR_old[j][i] = 1.0/m;
        }
    }
    float movies_correlation[m][m]= { // denoted in the paper as C
            {0.0,   1.0/6, 1.0/4, 1.0/5},
            {1.0/3, 0,     2.0/4, 3.0/5},
            {1.0/3, 2.0/6, 0,     1.0/5},
            {1.0/3, 3.0/6, 1.0/4, 0}
    };
//normalized movies ratings
    float initial_critics[m][n]= { //array with columns the vector d of each user
            {1.0/6, 5.0/10, 0,      4.0/9},
            {1.0/6, 0.0/10, 4.0/11, 1.0/9},
            {4.0/6, 5.0/10, 3.0/11, 1.0/9},
            {0.0,   0.0,   4.0/11, 3.0/9}
    };

    //declare pointers
    int *row_state, *col_state;
    float *read_pointer,  *value_to_be_written;

    // create object and run Itemrank algorithm
    itemrank obj;
    
    /*
    //problem here!!!
    obj.run(row_state, col_state, read_pointer, value_to_be_written);

    // print results
    for(int i = 0; i < m; i++){
        for(int j = 0; j < n; j++){
            std::cout << IR_new[i][j] << " ";
        }
        std::cout << "\n";
    }
    */

    return 0;
}

